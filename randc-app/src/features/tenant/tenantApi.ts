// src/features/tenant/tenantApi.ts

import { createApi } from '@reduxjs/toolkit/query/react';
import { customBaseQuery } from '../api/baseQuery';
import { Tenant } from '../../types/Tenant';

export const tenantApi = createApi({
  reducerPath: 'tenantApi',
  baseQuery: customBaseQuery,
  tagTypes: ['Tenant'], // Added tagTypes
  endpoints: (builder) => ({
    // 1) Create Tenant (POST /tenants)
    createTenant: builder.mutation<any, { name: string; domain?: string; aboutUs?: string }>({
      query: (body) => ({
        url: '/tenants',
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Tenant'], // Invalidate 'Tenant' tag to refetch tenant lists
    }),

    // 2) List all tenants (GET /tenants)
    listTenants: builder.query<Tenant[], void>({
      query: () => '/tenants',
      transformResponse: (response: { success: boolean; data: Tenant[] }) => response.data,
      providesTags: (result) =>
        result
          ? [
              ...result.map(({ _id }) => ({ type: 'Tenant' as const, id: _id })),
              { type: 'Tenant', id: 'LIST' },
            ]
          : [{ type: 'Tenant', id: 'LIST' }],
    }),

    // 3) Get tenant by ID (GET /tenants/:tenantId)
    getTenantById: builder.query<Tenant, string>({
      query: (tenantId) => `/tenants/${tenantId}`,
      transformResponse: (response: { success: boolean; data: Tenant }) => response.data,
      providesTags: (result, error, tenantId) => [{ type: 'Tenant', id: tenantId }],
    }),

    // 4) Update tenant (PUT /tenants/:tenantId)
    updateTenant: builder.mutation<any, { tenantId: string; data: any }>({
      query: ({ tenantId, data }) => ({
        url: `/tenants/${tenantId}`,
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (result, error, { tenantId }) => [{ type: 'Tenant', id: tenantId }],
    }),

    // 5) Delete tenant (DELETE /tenants/:tenantId)
    deleteTenant: builder.mutation<any, string>({
      query: (tenantId) => ({
        url: `/tenants/${tenantId}`,
        method: 'DELETE',
      }),
      invalidatesTags: (result, error, tenantId) => [{ type: 'Tenant', id: tenantId }],
    }),

    // 6) Suspend tenant (PUT /tenants/:tenantId/suspend)
    suspendTenant: builder.mutation<any, string>({
      query: (tenantId) => ({
        url: `/tenants/${tenantId}/suspend`,
        method: 'PUT',
      }),
      invalidatesTags: (result, error, tenantId) => [{ type: 'Tenant', id: tenantId }],
    }),

    // 7) Unsuspend tenant (PUT /tenants/:tenantId/unsuspend)
    unsuspendTenant: builder.mutation<any, string>({
      query: (tenantId) => ({
        url: `/tenants/${tenantId}/unsuspend`,
        method: 'PUT',
      }),
      invalidatesTags: (result, error, tenantId) => [{ type: 'Tenant', id: tenantId }],
    }),
  }),
});

// Hooks generated by createApi
export const {
  useCreateTenantMutation,
  useListTenantsQuery,
  useGetTenantByIdQuery,
  useUpdateTenantMutation,
  useDeleteTenantMutation,
  useSuspendTenantMutation,
  useUnsuspendTenantMutation,
} = tenantApi;
